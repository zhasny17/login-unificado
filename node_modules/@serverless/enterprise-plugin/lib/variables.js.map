{"version":3,"sources":["../../lib/variables.js"],"names":["_","require","getStateVariable","module","exports","hookIntoVariableGetter","ctx","secrets","accessKey","getValueFromSource","sls","variables","variableString","startsWith","state","secretsUsed","add","substring","processedInput","commands","split","Error","service","key","substr","length","outputName","subkey","app","tenant","stage","provider","getStage","region","getRegion","value","get","bind"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { getStateVariable } = require('@serverless/platform-sdk');\n\nmodule.exports.hookIntoVariableGetter = (ctx, secrets, accessKey) => {\n  const { getValueFromSource } = ctx.sls.variables;\n\n  ctx.sls.variables.getValueFromSource = async variableString => {\n    if (variableString.startsWith('secrets:')) {\n      ctx.state.secretsUsed.add(variableString.substring(8));\n      if (\n        ctx.sls.processedInput.commands[0] === 'login' ||\n        ctx.sls.processedInput.commands[0] === 'logout'\n      ) {\n        return {};\n      }\n      if (!secrets[variableString.split('secrets:')[1]]) {\n        throw new Error(`$\\{${variableString}} not defined`);\n      }\n      return secrets[variableString.split('secrets:')[1]];\n    } else if (variableString.startsWith('state:')) {\n      if (\n        ctx.sls.processedInput.commands[0] === 'login' ||\n        ctx.sls.processedInput.commands[0] === 'logout'\n      ) {\n        return {};\n      }\n      const service = variableString.substring(6).split('.', 1)[0];\n      const key = variableString.substring(6).substr(service.length);\n      const outputName = key.split('.')[1];\n      const subkey = key.substr(outputName.length + 2);\n      const { value } = await getStateVariable({\n        accessKey,\n        outputName,\n        service,\n        app: ctx.sls.service.app,\n        tenant: ctx.sls.service.tenant,\n        stage: ctx.provider.getStage(),\n        region: ctx.provider.getRegion(),\n      });\n      if (subkey) {\n        return _.get(value, subkey);\n      }\n      return value;\n    }\n\n    const value = getValueFromSource.bind(ctx.sls.variables)(variableString);\n    return value;\n  };\n\n  // return a restore function (mostly for testing)\n  return () => {\n    ctx.sls.variables.getValueFromSource = getValueFromSource;\n  };\n};\n"],"file":"variables.js"}